buildscript {
    ext {
        kotlinVersion = '1.3.40'
        springBootVersion = '2.0.1.RELEASE'
        kotlinLoggingVersion = "1.4.9"
        commonsIOVersion = "2.6"
    }
    repositories {
        mavenLocal()
        maven { url 'http://repo1.maven.org/maven2' }
        maven { url 'http://jcenter.bintray.com' }
        maven { url "http://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}"
    }
}

apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-jpa'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: "kotlin-allopen"

group = 'com.honeygoose.wifiadmin'
sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    mavenLocal()
    maven { url 'http://repo1.maven.org/maven2' }  // http for bypassing cert verification instead of mavenCentral()
    maven { url 'http://jcenter.bintray.com' }  // http for bypassing cert verification instead of jcenter()
    maven { url "http://plugins.gradle.org/m2/" }
}

dependencyManagement {
    imports {
        mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
    }
}

dependencies {
    // Spring
    compile('org.springframework.boot:spring-boot-starter-web')
    compile "org.springframework.boot:spring-boot-starter-jdbc"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"

    // token
    compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
    
    // spring security
    compile("org.springframework.security:spring-security-core")
    compile("org.springframework.security:spring-security-web")
    compile("org.springframework.security:spring-security-config")

    // kotlin
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compile("org.jetbrains.kotlin:kotlin-reflect")
    compile("io.github.microutils:kotlin-logging:${kotlinLoggingVersion}")
    compile("com.fasterxml.jackson.module:jackson-module-kotlin")

    //DB
    compile "org.liquibase:liquibase-core"
    runtime "org.postgresql:postgresql"
    compile "org.hibernate:hibernate-core"
    compile "org.hibernate:hibernate-entitymanager"
    compile "org.hibernate:hibernate-java8"
    compile "com.vladmihalcea:hibernate-types-52:2.4.3"

    // commons
    compile("commons-io:commons-io:${commonsIOVersion}")

    // test
    testCompile 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.0.0-RC1'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    // for those who don't have a postgres
    compile 'com.opentable.components:otj-pg-embedded:0.13.3'

    // swagger
    compile "io.springfox:springfox-swagger2:2.9.2"
    compile "io.springfox:springfox-swagger-ui:2.9.2"
    compile "io.springfox:springfox-bean-validators:2.9.2"
}

allOpen {
    annotation("javax.persistence.Entity")
    annotation("javax.persistence.Embeddable")
    annotation("javax.persistence.MappedSuperclass")
}

test {
    systemProperty 'spring.profiles.active', 'test'
    testLogging.showStandardStreams = true
}

bootJar {
    archiveName = "wifiadmin.jar"
    baseName = "wifiadmin"
}
